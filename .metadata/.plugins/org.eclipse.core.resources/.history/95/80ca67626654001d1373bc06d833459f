package com.publicissapient;

import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.publicissapient.dto.SignUpDto;
import com.publicissapient.entity.User;
import com.publicissapient.repository.UserRepository;

import static org.mockito.Mockito.when;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
@AutoConfigureMockMvc
class RegistrationServiceTest {
	
	@Autowired
	MockMvc mvc;

	@MockBean
	UserRepository userRepo;
	
    @Test
    public void contextLoads() {
    }
	
	@Test
	void testSaveUserSuccess() throws Exception
	{
		SignUpDto user=new SignUpDto("Ranjan","Adarsh",22,87654321,"abcd@gmail.com","Jamnagar","male","adi","hello","ADMIN");
		ObjectMapper mapper = new ObjectMapper();
		String userJson=mapper.writeValueAsString(user);
		
		when(userRepo.findByUsername("adi")).thenReturn(null);
		 
		 mvc.perform(post("/registration").content(userJson).contentType(MediaType.APPLICATION_JSON_VALUE))
		.andDo(print())
		.andExpect(status().isOk())
		.andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
		.andExpect(jsonPath("$.status").value("The User is Registered Successfully"));
		
	}
	
	
	@Test
	void testSaveUserFailure() throws Exception
	{
		SignUpDto user=new SignUpDto("Ranjan","Adarsh",22,87654321,"abcd@gmail.com","Jamnagar","male","adi","hello","ADMIN");
		ObjectMapper mapper = new ObjectMapper();
		String userJson=mapper.writeValueAsString(user);
		
		when(userRepo.findByUsername("adi")).thenReturn(new User());
		 
		 mvc.perform(post("/registration").content(userJson).contentType(MediaType.APPLICATION_JSON_VALUE))
		.andDo(print())
		.andExpect(status().isOk())
		.andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
		.andExpect(jsonPath("$.status").value("User Already Exists"));
		
	}
	
	@Test
	void testRegistration() throws Exception
	{
		 mvc.perform(get("/registration"))
		.andDo(print())
		.andExpect(status().isOk())
		.andExpect(jsonPath("$.status").value("It will Display Registration Form"));
	}
	
	@Test
	void testLogin() throws Exception
	{
		 mvc.perform(get("/").with(user("arun").password("1234")))
		.andDo(print())
		.andExpect(status().isOk())
		.andExpect(jsonPath("$.status").value("Login Successfull"));
	}
	
	// List,Find


}
