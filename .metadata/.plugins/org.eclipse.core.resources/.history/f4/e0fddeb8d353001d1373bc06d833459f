package com.publicissapient;

import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;
import static com.github.tomakehurst.wiremock.client.WireMock.get;
import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;
import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;

import org.springframework.cloud.contract.wiremock.AutoConfigureWireMock;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.publicissapient.dto.UserDto;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class TourServiceApplicationTestMock {

	@Mock
	private RestTemplate restTemplate;


	@Test
	public void testgetAccountsForUserptSuccess() throws Exception {

		stubFor(get(urlEqualTo("/find/3")).willReturn(aResponse().withHeader("Content-Type", "application/json")
				.withBody("{\r\n" + "    \"userId\": 3,\r\n" + "    \"lastName\": \"Sahani\",\r\n"
						+ "    \"firstName\": \"Gaurav\",\r\n" + "    \"age\": 24,\r\n"
						+ "    \"phoneNo\": 87654321,\r\n" + "    \"email\": \"efg@gmail.com\",\r\n"
						+ "    \"address\": \"Jamnagar\",\r\n" + "    \"gender\": \"male\",\r\n"
						+ "    \"username\": \"arun\",\r\n"
						+ "    \"password\": \"$2a$10$FHOOKcEsO/bTmcMkEmwiuuWV53j1YlTTj3B8T1DGnlc9r/YjCJ1WS\",\r\n"
						+ "    \"roles\": [\r\n" + "        {\r\n" + "            \"roleId\": 2,\r\n"
						+ "            \"roleName\": \"STAFF\",\r\n" + "            \"roleDescription\": \"Staff\"\r\n"
						+ "        }\r\n" + "    ]\r\n" + "}")));
		HttpHeaders headers = new HttpHeaders();
		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);

		HttpEntity<Void> req = new HttpEntity<>(headers);
		
		Mockito.when(restTemplate.exchange("http://localhost:8082/find/" + 3,
				HttpMethod.GET, req, UserDto.class)).thenReturn()

	}

}
