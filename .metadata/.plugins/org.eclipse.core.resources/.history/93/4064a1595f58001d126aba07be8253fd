package com.publicissapient.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;

import com.publicissapient.dto.BookingDto;
import com.publicissapient.dto.PackageDto;


@RestController
public class AdminController {

	@Autowired
	RestTemplate restTemplate;
	
	@GetMapping(path = "/createPackage")
	public ModelAndView createPackage() {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("create-package");
		return mv;
	}
	
	@PostMapping(path = "/createPackage")
	public ModelAndView savePackage(PackageDto packageDto) {
		ModelAndView mv = new ModelAndView();

		HttpHeaders headers = new HttpHeaders();

		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		headers.set("Content-Type", MediaType.APPLICATION_JSON_VALUE);

		HttpEntity<PackageDto> req = new HttpEntity<>(packageDto, headers);
		

		ResponseEntity<String> response = restTemplate.exchange("http://localhost:9090/admin/createPackage", HttpMethod.POST,
				req, String.class);
		
		if (response.getBody().contains("Package Added Successfully")) {
			mv.setViewName("package-success");
		} else {
			mv.setViewName("error-package-creation"); // Create Page for it
		}
		return mv;

	}
	
	@GetMapping(path = "/updatePackage")
	public ModelAndView updatePackage(@RequestParam("packageName") String packageName,@RequestParam("packageDetails") String packageDetails,
			@RequestParam("packageFees") Double packageFees,@RequestParam("packageFacilities") String packageFacilities) {
		
		ModelAndView mv = new ModelAndView();
		mv.addObject("packageName",packageName);
		mv.addObject("packageDetails",packageDetails);
		mv.addObject("packageFees",packageFees);
		mv.addObject("packageFacilities",packageFacilities);
		mv.setViewName("update-package");
		return mv;
	}
	
	@PostMapping(path = "/updatePackage")
	public ModelAndView updatePackageInfo(PackageDto packageDto) {
		
		ModelAndView mv = new ModelAndView();

		HttpHeaders headers = new HttpHeaders();

		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		headers.set("Content-Type", MediaType.APPLICATION_JSON_VALUE);

		HttpEntity<PackageDto> req = new HttpEntity<>(packageDto, headers);
		
		System.out.println(packageDto);

		ResponseEntity<String> response = restTemplate.exchange("http://localhost:9090/admin/updatePackage", HttpMethod.PUT,
				req, String.class);

		System.out.println(response.getBody().toString());
		
		if (response.getBody().contains("Package Updated Successfully")) {
			mv.setViewName("package-update-success");
		} else {
			mv.setViewName("error-update-package"); // Create Page for it
		}
		return mv;
	}
	
	@GetMapping(path = "/deletePackage")
	public ModelAndView deletePackage(@RequestParam("packageName") String packageName) {
		
		ModelAndView mv = new ModelAndView();
		mv.addObject("packageName",packageName);
		mv.setViewName("delete-package");
		return mv;
	}
	
	@PostMapping(path = "/deletePackage")
	public ModelAndView deletePackageInfo(String packageName) {
		
		ModelAndView mv = new ModelAndView();

		HttpHeaders headers = new HttpHeaders();

		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		headers.set("Content-Type", MediaType.APPLICATION_JSON_VALUE);

		HttpEntity<Void> req = new HttpEntity<>(headers);
		
		System.out.println(packageName);

		ResponseEntity<String> response = restTemplate.exchange("http://localhost:9090/admin/deletePackage/"+packageName, HttpMethod.DELETE,
				req, String.class);

		System.out.println(response.getBody().toString());
		
		if (response.getBody().contains("Package Deleted Successfully")) {
			mv.setViewName("package-delete-success");
		} else {
			mv.setViewName("error-delete-package"); // Create Page for it
		}
		return mv;
	}
	
	@GetMapping(path="/listBooking")
	public ModelAndView listBooking()
	{
		ModelAndView mv = new ModelAndView();
		
		HttpHeaders headers = new HttpHeaders();
		
		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		
		
        HttpEntity<List<BookingDto>> req = new HttpEntity<>(headers);
        ResponseEntity<List<BookingDto>> response = restTemplate.exchange("http://localhost:9090/admin/listBookings", HttpMethod.GET, req,
                new ParameterizedTypeReference<List<BookingDto>>() {});
        
        System.out.println(response.getBody().toString());
        
        mv.addObject("bookingList", response.getBody());
        mv.setViewName("allBooking");
        return mv;
	}
	
	@GetMapping(path = "/deleteBooking")
	public ModelAndView deleteBooking(@RequestParam("bookingId") Integer bookingId) {
		
		ModelAndView mv = new ModelAndView();
		mv.addObject("bookingId",bookingId);
		mv.setViewName("delete-booking");
		return mv;
	}
	
	@PostMapping(path = "/deleteBooking")
	public ModelAndView deleteBookingInfo(Integer bookingId) {
		
		ModelAndView mv = new ModelAndView();

		HttpHeaders headers = new HttpHeaders();

		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		headers.set("Content-Type", MediaType.APPLICATION_JSON_VALUE);

		HttpEntity<Void> req = new HttpEntity<>(headers);
		
		System.out.println(bookingId);

		ResponseEntity<String> response = restTemplate.exchange("http://localhost:9090/admin/deleteBooking/"+bookingId, HttpMethod.DELETE,
				req, String.class);

		System.out.println(response.getBody().toString());
		
		if (response.getBody().contains("Booking Deleted Successfully")) {
			mv.setViewName("booking-delete-success");
		} else {
			mv.setViewName("error-delete-booking"); // Create Page for it
		}
		return mv;
	}
	
	@GetMapping(path = "/assignStaff")
	public ModelAndView assignStaff(@RequestParam("bookingId") Integer bookingId) {
		
		ModelAndView mv = new ModelAndView();
		mv.addObject("bookingId",bookingId);
		mv.setViewName("assign-staff");
		return mv;
	}
	
	@PostMapping(path = "/assignStaff")
	public ModelAndView assignStaffInfo(Integer staffId,Integer bookingId) {
		
		ModelAndView mv = new ModelAndView();

		HttpHeaders headers = new HttpHeaders();

		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		headers.set("Content-Type", MediaType.APPLICATION_JSON_VALUE);

		HttpEntity<PackageDto> req = new HttpEntity<>(headers);
		
		System.out.println(staffId+" "+bookingId);

		ResponseEntity<String> response = restTemplate.exchange("http://localhost:9090/admin/assignStaff/"+staffId+"/"+bookingId, HttpMethod.PUT,
				req, String.class);

		System.out.println(response.getBody().toString());
		
		if (response.getBody().contains("Staff Has Been Assigned")) {
			mv.setViewName("assign-staff-success");
		} else {
			mv.setViewName("error-assign-staff"); // Create Page for it
		}
		return mv;
	}

	
	
}
